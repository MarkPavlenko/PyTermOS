#!/usr/bin/python3

# PyTermOS
# Copyright (C) 2024 markdev
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Additional Terms:
# - This software may be modified for personal use only.
# - This software cannot be used for commercial purposes or resold.
# - No warranty is provided with this software.

import os
import cmd
import hashlib
import getpass

# Function to hash passwords
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Function to verify password
def verify_password(stored_password, provided_password):
    return stored_password == hash_password(provided_password)

# Class for the main command interface
class PyTermOS(cmd.Cmd):
    intro = 'Welcome to PyTermOS. Type help or ? to list commands.'
    prompt = 'pytermos> '

    def __init__(self):
        super().__init__()
        self.stored_password = os.getenv('PYTERMOS_PASSWORD', hash_password('etsugenfgr'))

    def do_exit(self, line):
        "Exit the shell. (exit or exit -h)"
        if line.strip() == "-h":
            print("Exit is a command that sends you back to bash. Basically it just ends the program.")
        else:
            return True

    def do_shutdown(self, line):
        "Shutdown the system."
        print("Shutting down...")
        os.system("shutdown now")

    def do_setpassword(self, line):
        "Set a new password for super mode."
        new_password = getpass.getpass("Enter new password:")
        self.stored_password = hash_password(new_password)
        print("Password changed successfully.")

    def do_info(self, line):
        "Show system information."
        print("""
PPPP   y   y  TTTTT  EEEE  RRRR  M   M
P   P   y y     T    E     R   R MM MM
PPPP     y      T    EEE   RRRR  M M M
P        y      T    E     R  R  M   M
P        y      T    EEEE  R   R M   M
              Operating System

    PyTerm v0.1.0-stable
    Python: v3.8
    Operating System: PyTermOS v0.1.0-stable
        """)

    def do_type(self, line):
        "Echo back the input string."
        print(line)

    def do_pmdm(self, line):
        "Activate PMDM calculator."
        pmdmcalc()

    def do_super(self, line):
        "Activate supermode that lets you use supercommands."
        enter = getpass.getpass("Password: ")
        if verify_password(self.stored_password, enter):
            print("You are now in super mode. Type 'superhelp' for help.")
            super_cmd = SuperCmd()
            super_cmd.cmdloop()
        else:
            print("PyTerm error: wrong password.")

    def do_help(self, line):
        "Show help for commands."
        print("Commands: type, exit, info, pmdm, setpassword, super. Add-ons: -h")

class SuperCmd(cmd.Cmd):
    prompt = 'SuperMode> '

    def do_supertype(self, line):
        "Echo back the input string twice."
        print(line + line)

    def do_superexit(self, line):
        "Exit from super mode."
        print("Superexiting...")
        return True

    def do_superinfo(self, line):
        "Show information about super mode."
        print("""
    PPPP   y   y  TTTTT  EEEE  RRRR  M   M 
    P   P   y y     T    E     R   R MM MM       
    PPPP     y      T    EEE   RRRR  M M M       
    P        y      T    E     R  R  M   M      
    P        y      T    EEEE  R   R M   M SUPER MODE
                        Operating System
                      
    PyTerm Supermode v1.0
    Python: v3.8
    Application: PyTermOS v0.1.0-stable
        """)

    def do_superhelp(self, line):
        "Show help for super mode commands."
        print("Commands: supertype, superexit, superinfo, superhelp. Add-ons: -h")

def pmdmcalc():
    operation = input("PMDMcalc is welcoming you! hint: + - / *. Type the symbol here: ").strip()

    if operation in ["+", "-"]:
        num1 = float(input("Number 1: "))
        num2 = float(input("Number 2: "))
        print(f"Result: {num1 + num2 if operation == '+' else num1 - num2}")

    elif operation in ["/", "*"]:
        num1 = float(input("Number 1: "))
        num2 = float(input("Number 2: "))
        if operation == "/" and num2 == 0:
            print("Division by zero is not allowed.")
        else:
            print(f"Result: {num1 / num2 if operation == '/' else num1 * num2}")

    else:
        print("Your symbol is not supported in PMDMcalc. Please try again with another symbol.")

if __name__ == '__main__':
    PyTermOS().cmdloop()

os.chmod('/root/run', 0o755)
if not os.path.exists('/root/run'):
    os.makedirs('/root/run', exist_ok=True)
